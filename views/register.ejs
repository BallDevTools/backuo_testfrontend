<%- include('./partials/header') %>

    <!-- เพิ่ม ABI ของสัญญา -->
    <script>
        const contractABI = [
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_usdtToken",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "initialOwner",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "AlreadyMember",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "CooldownActive",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "ERC721EnumerableForbiddenBatchMint",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "ERC721IncorrectOwner",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ERC721InsufficientApproval",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "approver",
				"type": "address"
			}
		],
		"name": "ERC721InvalidApprover",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "ERC721InvalidOperator",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "ERC721InvalidOwner",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "receiver",
				"type": "address"
			}
		],
		"name": "ERC721InvalidReceiver",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			}
		],
		"name": "ERC721InvalidSender",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ERC721NonexistentToken",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "ERC721OutOfBoundsIndex",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "EmptyName",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "EmptyURI",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "InactivePlan",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "InvalidAmount",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "InvalidCycleMembers",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "InvalidDecimals",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "InvalidPlanID",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "InvalidRequest",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "InvalidRequests",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "LowFeeBalance",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "LowFundBalance",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "LowOwnerBalance",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "NextPlanOnly",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "NoPlanImage",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "NoRequest",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "NonTransferable",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "NonexistentToken",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "NotMember",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "NotPaused",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "OwnableInvalidOwner",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "OwnableUnauthorizedAccount",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "Paused",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "Plan1Only",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "PriceTooLow",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "ReentrancyGuardReentrantCall",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "ReentrantTransfer",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "token",
				"type": "address"
			}
		],
		"name": "SafeERC20FailedOperation",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "ThirtyDayLock",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "TimelockActive",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "TooSoon",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "UplineNotMember",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "UplinePlanLow",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "ZeroAddress",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "ZeroBalance",
		"type": "error"
	},
	{
		"inputs": [],
		"name": "ZeroPrice",
		"type": "error"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "approved",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "ApprovalForAll",
		"type": "event"
	},
	{
		"inputs": [
			{
				"components": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceType",
						"type": "uint256"
					}
				],
				"internalType": "struct CryptoMembershipNFT.WithdrawalRequest[]",
				"name": "requests",
				"type": "tuple[]"
			}
		],
		"name": "batchWithdraw",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "totalOwner",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "totalFee",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "totalFund",
				"type": "uint256"
			}
		],
		"name": "BatchWithdrawalProcessed",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "cancelEmergencyWithdraw",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "bool",
				"name": "status",
				"type": "bool"
			}
		],
		"name": "ContractPaused",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_price",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "_name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "_membersPerCycle",
				"type": "uint256"
			}
		],
		"name": "createPlan",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "emergencyWithdraw",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "EmergencyWithdraw",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "EmergencyWithdrawInitiated",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"name": "EmergencyWithdrawRequested",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "exitMembership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "ownerAmount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "feeAmount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "fundAmount",
				"type": "uint256"
			}
		],
		"name": "FundsDistributed",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "member",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "refundAmount",
				"type": "uint256"
			}
		],
		"name": "MemberExited",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "member",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "upline",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "planId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "cycleNumber",
				"type": "uint256"
			}
		],
		"name": "MemberRegistered",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "message",
				"type": "string"
			}
		],
		"name": "MembershipMinted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "newURI",
				"type": "string"
			}
		],
		"name": "MetadataUpdated",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "planId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "cycleNumber",
				"type": "uint256"
			}
		],
		"name": "NewCycleStarted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "planId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "membersPerCycle",
				"type": "uint256"
			}
		],
		"name": "PlanCreated",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "planId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "imageURI",
				"type": "string"
			}
		],
		"name": "PlanDefaultImageSet",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "member",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "oldPlanId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "newPlanId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "cycleNumber",
				"type": "uint256"
			}
		],
		"name": "PlanUpgraded",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "newPriceFeed",
				"type": "address"
			}
		],
		"name": "PriceFeedUpdated",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "ReferralPaid",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_planId",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "_upline",
				"type": "address"
			}
		],
		"name": "registerMember",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "renounceOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "requestEmergencyWithdraw",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "restartAfterPause",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "bytes",
				"name": "data",
				"type": "bytes"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "setApprovalForAll",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "baseURI",
				"type": "string"
			}
		],
		"name": "setBaseURI",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bool",
				"name": "_paused",
				"type": "bool"
			}
		],
		"name": "setPaused",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_planId",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "_imageURI",
				"type": "string"
			}
		],
		"name": "setPlanDefaultImage",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_planId",
				"type": "uint256"
			},
			{
				"internalType": "bool",
				"name": "_isActive",
				"type": "bool"
			}
		],
		"name": "setPlanStatus",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_priceFeed",
				"type": "address"
			}
		],
		"name": "setPriceFeed",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "newDuration",
				"type": "uint256"
			}
		],
		"name": "TimelockUpdated",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "TransferAttemptBlocked",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_planId",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "_newMembersPerCycle",
				"type": "uint256"
			}
		],
		"name": "updateMembersPerCycle",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_newPlanId",
				"type": "uint256"
			}
		],
		"name": "upgradePlan",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "upline",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "downline",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "downlineCurrentPlan",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "downlineTargetPlan",
				"type": "uint256"
			}
		],
		"name": "UplineNotified",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "withdrawFeeSystemBalance",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "withdrawFundBalance",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "withdrawOwnerBalance",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "getApproved",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getContractStatus",
		"outputs": [
			{
				"internalType": "bool",
				"name": "isPaused",
				"type": "bool"
			},
			{
				"internalType": "uint256",
				"name": "totalBalance",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "memberCount",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "currentPlanCount",
				"type": "uint256"
			},
			{
				"internalType": "bool",
				"name": "hasEmergencyRequest",
				"type": "bool"
			},
			{
				"internalType": "uint256",
				"name": "emergencyTimeRemaining",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_tokenId",
				"type": "uint256"
			}
		],
		"name": "getNFTImage",
		"outputs": [
			{
				"internalType": "string",
				"name": "imageURI",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "planId",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "createdAt",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_planId",
				"type": "uint256"
			}
		],
		"name": "getPlanCycleInfo",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "currentCycle",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "membersInCurrentCycle",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "membersPerCycle",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_member",
				"type": "address"
			}
		],
		"name": "getReferralChain",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getSystemStats",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "totalMembers",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "totalRevenue",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "totalCommission",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "ownerFunds",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "feeFunds",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "fundFunds",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "isApprovedForAll",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "isTokenTransferable",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "pure",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "MAX_MEMBERS_PER_CYCLE",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "members",
		"outputs": [
			{
				"internalType": "address",
				"name": "upline",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "totalReferrals",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "totalEarnings",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "planId",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "cycleNumber",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "registeredAt",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ownerOf",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "planCycles",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "currentCycle",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "membersInCurrentCycle",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "planDefaultImages",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "plans",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "membersPerCycle",
				"type": "uint256"
			},
			{
				"internalType": "bool",
				"name": "isActive",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "priceFeed",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes4",
				"name": "interfaceId",
				"type": "bytes4"
			}
		],
		"name": "supportsInterface",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "TIMELOCK_DURATION",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "tokenByIndex",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "tokenImages",
		"outputs": [
			{
				"internalType": "string",
				"name": "imageURI",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "planId",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "createdAt",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "tokenOfOwnerByIndex",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_tokenId",
				"type": "uint256"
			}
		],
		"name": "tokenURI",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "usdtToken",
		"outputs": [
			{
				"internalType": "contract IERC20",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "validateContractBalance",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]
    </script>

    <section class="register py-5">
        <div class="container">
            <div class="row">
                <div class="col-md-8 mx-auto">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="text-center">สมัครสมาชิก NFT</h3>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="plan-info mb-3">
                                        <h4>แพลนเริ่มต้น</h4>
                                        <div class="plan-card">
                                            <div class="plan-header">
                                                <h3>แพลน <%= startPlan.name %>
                                                </h3>
                                                <div class="plan-price">
                                                    <%= startPlan.price %> USDT
                                                </div>
                                            </div>
                                            <div class="plan-features">
                                                <ul>
                                                    <li>สมาชิกต่อรอบ: <%= startPlan.membersPerCycle %> คน</li>
                                                    <li>รอบปัจจุบัน: <%= startPlan.currentCycle %>
                                                    </li>
                                                    <li>สมาชิกในรอบปัจจุบัน: <%= startPlan.membersInCurrentCycle %> /
                                                            <%= startPlan.membersPerCycle %>
                                                    </li>
                                                    <li>รองรับระบบแนะนำ (Referral)</li>
                                                    <li>รับ NFT สมาชิก</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <form id="register-form" action="/register" method="POST">
                                        <div class="form-group">
                                            <label for="walletAddress">ที่อยู่กระเป๋า</label>
                                            <div class="input-group">
                                                <input type="text" id="walletAddress" name="walletAddress"
                                                    class="form-control" readonly required>
                                                <div class="input-group-append">
                                                    <button type="button" id="connect-wallet-btn"
                                                        class="btn btn-primary">เชื่อมต่อกระเป๋า</button>
                                                </div>
                                            </div>
                                            <small class="form-text text-muted">กรุณาเชื่อมต่อกระเป๋า MetaMask
                                                ของคุณ</small>
                                        </div>

                                        <div class="form-group">
                                            <label for="upline">ผู้แนะนำ (ถ้ามี)</label>
                                            <input type="text" id="upline" name="upline" class="form-control"
                                                value="<%= ref %>">
                                            <small class="form-text text-muted">ใส่ที่อยู่กระเป๋าของผู้แนะนำ
                                                (ถ้ามี)</small>
                                        </div>

                                        <div class="form-group token-approval" style="display: none;">
                                            <div class="alert alert-info">
                                                <p><strong>ขั้นตอนที่ 1:</strong> อนุญาตให้สัญญาใช้โทเคน USDT ของคุณ</p>
                                                <button type="button" id="approve-token-btn"
                                                    class="btn btn-warning btn-block mt-2">อนุญาตโทเคน USDT</button>
                                            </div>
                                        </div>

                                        <div class="form-group register-action" style="display: none;">
                                            <div class="alert alert-info">
                                                <p><strong>ขั้นตอนที่ 2:</strong> สมัครสมาชิกและรับ NFT</p>
                                                <button type="submit"
                                                    class="btn btn-success btn-block mt-2">สมัครสมาชิก</button>
                                            </div>
                                        </div>
                                    </form>

                                    <div class="mt-3">
                                        <p>หมายเหตุ:</p>
                                        <ul>
                                            <li>คุณต้องมี USDT อย่างน้อย <%= startPlan.price %> ในกระเป๋าของคุณ</li>
                                            <li>NFT สมาชิกของคุณไม่สามารถโอนให้ผู้อื่นได้</li>
                                            <li>คุณสามารถออกจากการเป็นสมาชิกและรับเงินคืน 30% หลังจาก 30 วัน</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- เพิ่ม JavaScript เฉพาะสำหรับหน้านี้ -->
    <script>
        async function checkIfOwner(userAddress, contractAddress) {
    try {
        const web3 = new Web3(window.ethereum);
        const contract = new web3.eth.Contract(contractABI, contractAddress);
        const contractOwner = await contract.methods.owner().call();
        return userAddress.toLowerCase() === contractOwner.toLowerCase();
    } catch (error) {
        console.error('Error checking owner:', error);
        return false;
    }
}
        document.addEventListener('DOMContentLoaded', async () => {
            const connectWalletBtn = document.getElementById('connect-wallet-btn');
            const approveTokenBtn = document.getElementById('approve-token-btn');
            const walletAddressInput = document.getElementById('walletAddress');
            const uplineInput = document.getElementById('upline');
            const tokenApprovalSection = document.querySelector('.token-approval');
            const registerActionSection = document.querySelector('.register-action');
            const registerForm = document.getElementById('register-form');

            // ดึงค่าจาก config
            const contractAddress = document.querySelector('meta[name="contract-address"]').content;
            const usdtAddress = document.querySelector('meta[name="usdt-address"]').content;
            const planPrice = '<%= startPlan.price %>'; // ราคาแพลน

            // เชื่อมต่อกระเป๋า
            connectWalletBtn.addEventListener('click', async () => {
                const address = await window.app.connectMetaMask();

                if (address) {
                    walletAddressInput.value = address;
                    connectWalletBtn.textContent = 'เชื่อมต่อแล้ว';
                    connectWalletBtn.disabled = true;

                    // ตรวจสอบว่าเป็นสมาชิกอยู่แล้วหรือไม่
                    try {
                        const isMemberResponse = await fetch(`/api/members/check-member?address=${address}`);
                        const isMemberData = await isMemberResponse.json();

                        if (isMemberData.isMember) {
                            alert('กระเป๋านี้เป็นสมาชิกอยู่แล้ว ไม่สามารถสมัครซ้ำได้');
                            return;
                        }

                        // ตรวจสอบการอนุญาตโทเคน
                        const allowance = await window.app.checkAllowance(usdtAddress, address, contractAddress);
                        const requiredAmount = window.app.toWei(planPrice, 6); // USDT ใช้ทศนิยม 6 ตำแหน่ง

                        if (BigInt(allowance) >= BigInt(requiredAmount)) {
                            // อนุญาตแล้ว แสดงปุ่มสมัครสมาชิก
                            registerActionSection.style.display = 'block';
                        } else {
                            // ยังไม่ได้อนุญาต แสดงปุ่มอนุญาตโทเคน
                            tokenApprovalSection.style.display = 'block';

                            // ตรวจสอบยอดเงิน USDT
                            try {
                                const balanceWei = await window.ethereum.request({
                                    method: 'eth_call',
                                    params: [{
                                        to: usdtAddress,
                                        data: `0x70a08231000000000000000000000000${address.slice(2)}`
                                    }, 'latest']
                                });

                                const balance = parseInt(balanceWei, 16) / 10 ** 6; // USDT มีทศนิยม 6 ตำแหน่ง

                                if (balance < parseFloat(planPrice)) {
                                    alert(`ยอดเงิน USDT ของคุณไม่เพียงพอ (${balance.toFixed(2)} USDT) สำหรับการสมัครสมาชิก (${planPrice} USDT)`);
                                }
                            } catch (error) {
                                console.error('Error checking USDT balance:', error);
                            }
                        }
                    } catch (error) {
                        console.error('Error checking member status:', error);
                        alert('เกิดข้อผิดพลาดในการตรวจสอบสถานะสมาชิก');
                    }
                }
            });

            // อนุญาตโทเคน
            approveTokenBtn.addEventListener('click', async () => {
                const address = walletAddressInput.value;

                if (address) {
                    const requiredAmount = window.app.toWei(planPrice, 6); // USDT ใช้ทศนิยม 6 ตำแหน่ง
                    const result = await window.app.approveToken(usdtAddress, contractAddress, requiredAmount);

                    if (result) {
                        tokenApprovalSection.innerHTML = '<div class="alert alert-success">อนุญาตโทเคนสำเร็จ</div>';
                        registerActionSection.style.display = 'block';
                    }
                }
            });

            // ตรวจสอบข้อมูลก่อนส่งฟอร์ม
            registerForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                const walletAddress = walletAddressInput.value;
                const upline = uplineInput.value;

                try {
                    // ตรวจสอบเครือข่าย
                    const networkId = parseInt(document.querySelector('meta[name="network-id"]').content);
                    const isCorrectNetwork = await window.app.checkNetwork(networkId);
                    
                    if (!isCorrectNetwork) {
                        alert('กรุณาเปลี่ยนเครือข่ายเป็น ' + document.querySelector('meta[name="network-name"]').content);
                        return;
                    }

                    // ส่งข้อมูลไปยัง API
                    const response = await fetch('/register', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            walletAddress,
                            upline
                        })
                    });

                    const data = await response.json();

                    if (data.success) {
                        // เรียกใช้ smart contract
                        const web3 = new Web3(window.ethereum);
                        const contract = new web3.eth.Contract(contractABI, contractAddress);
                        
                        // เรียกใช้ฟังก์ชัน registerMember โดยส่ง planId และ upline
                        const result = await contract.methods.registerMember(1, upline || '0x0000000000000000000000000000000000000000').send({
                            from: walletAddress
                        });

                        if (result.status) {
                            alert('สมัครสมาชิกสำเร็จ!');
                            window.location.href = '/user/dashboard';
                        } else {
                            alert('เกิดข้อผิดพลาดในการสมัครสมาชิก');
                        }
                    } else {
                        alert(data.message || 'เกิดข้อผิดพลาดในการสมัครสมาชิก');
                    }
                } catch (error) {
                    console.error('Error registering member:', error);
                    alert('เกิดข้อผิดพลาดในการสมัครสมาชิก: ' + error.message);
                }
            });
        });
    </script>

    <%- include('./partials/footer') %>