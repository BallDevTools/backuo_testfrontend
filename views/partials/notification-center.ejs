<!-- views/partials/notification-center.ejs -->
<div class="notification-center">
    <div class="notification-toggle">
        <button type="button" id="notification-toggle-btn" class="btn btn-light">
            <i class="fas fa-bell"></i>
            <span class="notification-badge" id="notification-count" style="display: none;">0</span>
        </button>
    </div>
    
    <div class="notification-dropdown" id="notification-dropdown" style="display: none;">
        <div class="notification-header">
            <h3>การแจ้งเตือน</h3>
            <button type="button" id="mark-all-read-btn" class="btn btn-sm btn-light">
                <i class="fas fa-check-double"></i> อ่านทั้งหมด
            </button>
        </div>
        
        <div class="notification-list" id="notification-list">
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">กำลังโหลด...</span>
                </div>
            </div>
        </div>
        
        <div class="notification-footer">
            <a href="/user/notifications" class="btn btn-sm btn-primary btn-block">ดูทั้งหมด</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const notificationToggleBtn = document.getElementById('notification-toggle-btn');
        const notificationDropdown = document.getElementById('notification-dropdown');
        const notificationList = document.getElementById('notification-list');
        const notificationCount = document.getElementById('notification-count');
        const markAllReadBtn = document.getElementById('mark-all-read-btn');
        
        let notifications = [];
        
        // เปิด/ปิดการแจ้งเตือน
        notificationToggleBtn.addEventListener('click', function() {
            if (notificationDropdown.style.display === 'none') {
                notificationDropdown.style.display = 'block';
                loadNotifications();
            } else {
                notificationDropdown.style.display = 'none';
            }
        });
        
        // ปิดการแจ้งเตือนเมื่อคลิกนอกกล่อง
        document.addEventListener('click', function(event) {
            if (!notificationDropdown.contains(event.target) && 
                !notificationToggleBtn.contains(event.target) && 
                notificationDropdown.style.display === 'block') {
                notificationDropdown.style.display = 'none';
            }
        });
        
        // โหลดการแจ้งเตือน
        async function loadNotifications() {
            try {
                const response = await fetch('/api/notifications?limit=5&unread=true');
                notifications = await response.json();
                
                renderNotifications();
                updateNotificationCount();
            } catch (error) {
                console.error('Error loading notifications:', error);
                notificationList.innerHTML = `
                    <div class="notification-item text-center">
                        <p class="text-danger">เกิดข้อผิดพลาดในการโหลดการแจ้งเตือน</p>
                    </div>
                `;
            }
        }
        
        // แสดงการแจ้งเตือน
        function renderNotifications() {
            if (notifications.length === 0) {
                notificationList.innerHTML = `
                    <div class="notification-item text-center">
                        <p class="text-muted">ไม่มีการแจ้งเตือนใหม่</p>
                    </div>
                `;
                return;
            }
            
            notificationList.innerHTML = '';
            
            notifications.forEach(notification => {
                const notificationItem = document.createElement('div');
                notificationItem.className = `notification-item ${notification.isRead ? '' : 'unread'}`;
                notificationItem.setAttribute('data-id', notification.id);
                
                // กำหนดไอคอนตามประเภทการแจ้งเตือน
                let icon = 'bell';
                switch (notification.type) {
                    case 'member_registered':
                        icon = 'user-plus';
                        break;
                    case 'plan_upgraded':
                        icon = 'arrow-up';
                        break;
                    case 'referral_commission':
                        icon = 'money-bill-wave';
                        break;
                    case 'member_exited':
                        icon = 'user-minus';
                        break;
                    case 'cycle_completed':
                        icon = 'check-circle';
                        break;
                    case 'contract_status':
                        icon = 'exclamation-triangle';
                        break;
                }
                
                notificationItem.innerHTML = `
                    <div class="notification-icon">
                        <i class="fas fa-${icon}"></i>
                    </div>
                    <div class="notification-content">
                        <h4 class="notification-title">${notification.title}</h4>
                        <p class="notification-message">${notification.message}</p>
                        <div class="notification-time">
                            ${new Date(notification.createdAt).toLocaleString('th-TH')}
                        </div>
                    </div>
                    <div class="notification-actions">
                        <button type="button" class="btn btn-sm btn-light mark-read-btn" data-id="${notification.id}">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                `;
                
                notificationList.appendChild(notificationItem);
            });
            
            // ผูกอีเวนต์สำหรับปุ่มอ่านการแจ้งเตือน
            document.querySelectorAll('.mark-read-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.getAttribute('data-id');
                    markNotificationAsRead(id);
                });
            });
            
            // ผูกอีเวนต์สำหรับคลิกที่การแจ้งเตือน
            document.querySelectorAll('.notification-item').forEach(item => {
                item.addEventListener('click', function(event) {
                    if (!event.target.classList.contains('mark-read-btn')) {
                        const id = this.getAttribute('data-id');
                        markNotificationAsRead(id);
                    }
                });
            });
        }
        
        // อัพเดทจำนวนการแจ้งเตือน
        function updateNotificationCount() {
            const unreadCount = notifications.filter(notification => !notification.isRead).length;
            
            if (unreadCount > 0) {
                notificationCount.textContent = unreadCount;
                notificationCount.style.display = 'block';
            } else {
                notificationCount.style.display = 'none';
            }
        }
        
        // ทำเครื่องหมายว่าอ่านแล้ว
        async function markNotificationAsRead(id) {
            try {
                const response = await fetch(`/api/notifications/${id}/read`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    // อัพเดทแคชของการแจ้งเตือน
                    const notification = notifications.find(notification => notification.id === parseInt(id));
                    if (notification) {
                        notification.isRead = true;
                    }
                    
                    // แสดงการแจ้งเตือนอีกครั้ง
                    renderNotifications();
                    updateNotificationCount();
                }
            } catch (error) {
                console.error('Error marking notification as read:', error);
            }
        }
        
        // ทำเครื่องหมายว่าอ่านทั้งหมด
        markAllReadBtn.addEventListener('click', async function() {
            try {
                const response = await fetch('/api/notifications/read-all', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    // ทำเครื่องหมายว่าอ่านทั้งหมดในแคช
                    notifications.forEach(notification => {
                        notification.isRead = true;
                    });
                    
                    // แสดงการแจ้งเตือนอีกครั้ง
                    renderNotifications();
                    updateNotificationCount();
                }
            } catch (error) {
                console.error('Error marking all notifications as read:', error);
            }
        });
        
        // โหลดการแจ้งเตือนทันทีและตั้งเวลาโหลดใหม่ทุก 30 วินาที
        loadNotifications();
        setInterval(loadNotifications, 30000);
    });
</script>

<style>
    .notification-center {
        position: relative;
    }
    
    .notification-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background-color: #e74c3c;
        color: white;
        border-radius: 50%;
        width: 16px;
        height: 16px;
        font-size: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .notification-dropdown {
        position: absolute;
        top: 40px;
        right: 0;
        width: 320px;
        background-color: white;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
    }
    
    .notification-header {
        padding: 10px 15px;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .notification-header h3 {
        margin: 0;
        font-size: 16px;
        font-weight: bold;
    }
    
    .notification-list {
        max-height: 400px;
        overflow-y: auto;
    }
    
    .notification-item {
        padding: 10px 15px;
        border-bottom: 1px solid #eee;
        display: flex;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    
    .notification-item:hover {
        background-color: #f9f9f9;
    }
    
    .notification-item.unread {
        background-color: #f0f7ff;
    }
    
    .notification-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #f1f1f1;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 10px;
    }
    
    .notification-content {
        flex: 1;
    }
    
    .notification-title {
        margin: 0 0 5px;
        font-size: 14px;
        font-weight: bold;
    }
    
    .notification-message {
        margin: 0;
        font-size: 12px;
        color: #666;
    }
    
    .notification-time {
        font-size: 10px;
        color: #999;
        margin-top: 5px;
    }
    
    .notification-footer {
        padding: 10px 15px;
        border-top: 1px solid #eee;
    }
</style>